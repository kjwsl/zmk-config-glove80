/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers
#define DEFAULT    0
#define LOWER      1
#define FACTORY    2
#define TEST       3
#define GAMING     4
#define MAGIC      5


/ {
	behaviors {
		// For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
		// Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
		layer_td: tap_dance_0 {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&mo LOWER>, <&to LOWER>;
		};
		
		lh_pht: left_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <150>;// <---[[produces tap if held longer than tapping-term-ms]]
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
			require-prior-idle-ms = <100>;
		};
		
		rh_pht: right_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <150>;// <---[[produces tap if held longer than tapping-term-ms]]
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
			require-prior-idle-ms = <100>;
		};
	};
	
	combos {
		compatible = "zmk,combos";
		combo_tab {
			timeout-ms = <50>;
			key-positions = <24 25>;// W + E
			bindings = <&kp ESC>;
		};
	};
	
	
	macros {
		bt_0: bt_profile_macro_0 {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 0>;
		};
		
		bt_1: bt_profile_macro_1 {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 1>;
		};
		
		bt_2: bt_profile_macro_2 {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 2>;
		};
		
		bt_3: bt_profile_macro_3 {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
			= <&out OUT_BLE>,
			<&bt BT_SEL 3>;
		};
	};
	
	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
			// kinesis-like layout
			
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
			&kp EQUAL &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS
			&kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BSLH
			&kp ESC &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI &kp SQT
			&kp LSHFT &kp Z &kp X &kp C &kp V &kp B &kp LCTRL &kp LALT &kp HOME &kp PG_UP &kp LGUI &kp RCTRL &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp RSHFT
			&mo MAGIC &kp GRAVE &kp CAPSLOCK &kp LEFT &kp RIGHT &kp BSPC &kp DEL &kp END &kp PG_DN &kp RET &kp SPACE &kp UP &kp DOWN &kp LBKT &kp RBKT &lower
			>;
		};
		
		lower_layer {
			bindings = <
			&kp C_BRI_DN &kp C_BRI_UP &kp C_PREV &kp C_NEXT &kp C_PP &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &none &kp PAUSE_BREAK
			&trans &none &none &none &none &kp HOME &kp LPAR &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
			&trans &none &none &kp UP &none &kp END &kp RPAR &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS &kp SLCK
			&trans &none &kp LEFT &kp DOWN &kp RIGHT &kp PG_UP &kp PRCNT &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS &none
			&trans &kp K_CMENU &none &kp F11 &kp F12 &kp PG_DN &trans &trans &to DEFAULT &trans &trans &trans &kp COMMA &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_ENTER &trans
			&trans &kp CAPS &kp INS &kp F11 &kp F12 &trans &trans &trans &trans &trans &trans &kp KP_N0 &kp KP_N0 &kp KP_DOT &kp KP_ENTER &trans
			>;
		};
		
		factory_layer {
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
			&kp EQUAL &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS
			&kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BSLH
			&kp ESC &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI &kp SQT
			&kp GRAVE &kp Z &kp X &kp C &kp V &kp B &kp LSHFT &kp LCTRL &lower &kp LGUI &kp RCTRL &kp RSHFT &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp PG_UP
			&mo MAGIC &kp HOME &kp END &kp LEFT &kp RIGHT &kp BSPC &kp DEL &kp LALT &kp RALT &kp RET &kp SPACE &kp UP &kp DOWN &kp LBKT &kp RBKT &kp PG_DN
			>;
		};
		
		test_layer {
			bindings = <
			// R1C1
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
			// Row 1 RH
			&kp EQUAL &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS
			// Row 2 LH
			&kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp BSLH
			&kp ESC &lh_pht LGUI A &lh_pht LALT S &lh_pht LCTRL D &lh_pht LSHIFT F &kp G &kp H &rh_pht LSHIFT J &rh_pht LCTRL K &rh_pht LALT L &rh_pht LGUI SEMI &kp SQT
			&kp GRAVE &kp Z &kp X &kp C &kp V &kp B &kp LSHFT &kp LCTRL &layer_td &kp LGUI &kp RCTRL &kp RSHFT &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp PG_UP
			&mo MAGIC &kp HOME &kp END &kp LEFT &kp RIGHT &kp BSPC &kp DEL &kp LALT &kp RALT &kp RET &kp SPACE &kp UP &kp DOWN &kp LBKT &kp RBKT &kp PG_DN
			>;
		};
		
		gaming_layer {
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
			&kp EQUAL &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp BSLH
			&kp MINUS &kp GRAVE &kp B &kp N &kp M &kp DQT &kp B &kp N &kp M &kp COMMA &kp PERIOD &kp SLASH
			&kp T &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P
			&kp G &kp LSHFT &kp A &kp S &kp D &kp F &kp ESC &kp ENTER &kp PAUSE_BREAK &kp BSPC &kp DEL &kp ENTER &kp G &kp H &kp J &kp K &kp L &kp SEMI
			&kp V &kp LCTRL &kp Z &kp X &kp C &kp SPACE &kp LALT &kp LGUI &kp RALT &kp TAB &kp SPACE &kp LPAR &kp LBKT &kp RBKT &kp RPAR &mo MAGIC
			>;
		};
		
		magic_layer {
			bindings = <
			&bt BT_CLR &none &none &none &none &none &none &none &none &none
			&to FACTORY &to DEFAULT &to TEST &to GAMING &none &none &none &none &none &none &none &none
			&none &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG &none &none &none &none &none &none
			&bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF &none &none &none &none &none &bootloader
			&sys_reset &none &none &none &none &none &bt_2 &bt_3 &none &none &none &none &none &none &none &none &none &sys_reset
			&none &none &none &none &none &bt_0 &bt_1 &out OUT_USB &none &none &none &none &none &none &none &none
			>;
		};
	};
};
